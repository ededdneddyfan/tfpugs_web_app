//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "matches")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub match_id: Option<i32>,
    pub deleted_at: Option<DateTimeUtc>,
    #[sea_orm(column_type = "Float", nullable)]
    pub blue_probability: Option<f32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub blue_rank: Option<f32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub blue_team: Option<String>,
    #[sea_orm(column_type = "Float", nullable)]
    pub red_probability: Option<f32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub red_rank: Option<f32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub red_team: Option<String>,
    pub map: Option<String>,
    pub server: Option<String>,
    pub game_type: Option<String>,
    pub match_outcome: Option<i32>,
    pub winning_score: Option<i32>,
    pub losing_score: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub stats_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}
